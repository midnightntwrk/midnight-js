import CompactStandardLibrary;

export circuit mintUnshieldedToSelfTest(domainSep: Bytes<32>, amount: Uint<64>): UnshieldedCoinInfo {
  return mintUnshieldedToken(disclose(domainSep), disclose(amount), left<ContractAddress, UserAddress>(kernel.self()));
}

export circuit mintUnshieldedToContractTest(domainSep: Bytes<32>, address: ContractAddress, amount: Uint<64>): UnshieldedCoinInfo {
  return mintUnshieldedToken(disclose(domainSep), disclose(amount), left<ContractAddress, UserAddress>(disclose(address)));
}

export circuit mintUnshieldedToUserTest(domainSep: Bytes<32>, address: UserAddress, amount: Uint<64>): UnshieldedCoinInfo {
  return mintUnshieldedToken(disclose(domainSep), disclose(amount), right<ContractAddress, UserAddress>(disclose(address)));
}

export circuit sendUnshieldedToSelfTest(coins: UnshieldedCoinInfo): [] {
  sendUnshielded(disclose(coins), left<ContractAddress, UserAddress>(kernel.self()));
}

export circuit sendUnshieldedToContractTest(coins: UnshieldedCoinInfo, address: ContractAddress): [] {
  sendUnshielded(disclose(coins), left<ContractAddress, UserAddress>(disclose(address)));
}

export circuit sendUnshieldedToUserTest(coins: UnshieldedCoinInfo, address: UserAddress): [] {
  sendUnshielded(disclose(coins), right<ContractAddress, UserAddress>(disclose(address)));
}

export circuit receiveUnshieldedTest(coins: UnshieldedCoinInfo): [] {
  receiveUnshielded(disclose(coins));
}

export circuit getUnshieldedBalanceTest(color: Bytes<32>): Uint<128> {
  return unshieldedBalance(disclose(color));
}

export circuit getUnshieldedBalanceGtTest(color: Bytes<32>, amount: Uint<128>): Boolean {
  return unshieldedBalanceGt(disclose(color), disclose(amount));
}

export circuit getUnshieldedBalanceLtTest(color: Bytes<32>, amount: Uint<128>): Boolean {
  return unshieldedBalanceLt(disclose(color), disclose(amount));
}
