name: CI - Platform.js
env:
  MIDNIGHTCI_PACKAGES_WRITE: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

permissions: {}

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      should_run:
        required: true
        type: string
      should_prerelease:
        required: true
        type: string
      yarn_install:
        type: string
        description: Install phase command line
        required: false
        default: 'yarn install --immutable'
      yarn_filter:
        type: string
        description: Optional filter to include when running Yarn (i.e., --filter=...)
        required: false
        default: '--filter="./platform-js/*"'
      yarn_lint_paths:
        type: string
        description: Optional paths to include when running 'yarn lint'' (i.e., ./packages)
        required: false
        default: './platform-js'

concurrency:
  group: P-JS-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    permissions:
      contents: read
      issues: read
      id-token: write
      packages: write
      checks: write
      pull-requests: write
    if: inputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@d2ee2b1047995102b08cb4e778b44bd2a662eba3  #v1
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # ratchet:actions/checkout@v5

      - name: Load environment variables
        run: |
          export $(grep -v '^#' .github/env/global.env | xargs)
          for var in $(cut -d= -f1 .github/env/global.env); do
            echo "$var=${!var}" >> $GITHUB_ENV
          done
          export $(grep -v '^#' .github/env/global_c_js.env | xargs)
          for var in $(cut -d= -f1 .github/env/global_c_js.env); do
            echo "$var=${!var}" >> $GITHUB_ENV
          done

      - name: Log in to GitHub Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # ratchet:docker/login-action@v3
        with:
          registry: 'https://ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # ratchet:actions/setup-node@v4
        with:
          always-auth: true
          registry-url: https://npm.pkg.github.com/
          scope: '@midnight-ntwrk'
          node-version-file: '.nvmrc'
          cache: 'yarn'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Configure yarn
        run: yarn config set 'npmScopes.midnight-ntwrk.npmAuthToken' ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Cache Turbo and Yarn dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            **/node_modules
            ~/.yarn
            .turbo
          key: turbo-pjs-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/turbo.json') }}
          restore-keys: |
            turbo-pjs-${{ runner.os }}-

      - name: Install dependencies
        run: |
          ${{ inputs.yarn_install }}

      - name: Run build
        run: yarn build ${{ inputs.yarn_filter }} --cache-dir ./turbo
        env:
          GITHUB_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Run linter
        run: yarn lint -- ${{ inputs.yarn_lint_paths }}

      - name: Run tests
        run: |
          yarn test ${{ inputs.yarn_filter }} --cache-dir ./turbo
        env:
          GITHUB_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Aggregate coverage reports
        run: |
          npx --yes istanbul-merge --out coverage.json $(find . -type f -name 'coverage-final.json' | sort -u | tr '\n' ' ')
          npx --yes istanbul report --include coverage.json --dir coverage html

      - name: Merge report as ZIP
        run: |
          #ArtiomTr/jest-coverage-report-action@v2 has a bug, this is temp solution
          mv coverage coverage_$(date +"%Y%m%d%H%M%S")
          zip -r coverage-p-js.zip coverage*

      - name: Upload Artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # ratchet:actions/upload-artifact@v4
        with:
          name: Coverage Report P-JS
          path: coverage-p-js.zip

      - name: Publish Test Coverage
        uses: MishaKav/jest-coverage-comment@aa3935cf9ee61efc40d9e47dcc8a523a49a70b96 # ratchet:MishaKav/jest-coverage-comment@v1
        with:
          hide-comment: false
          unique-id-for-comment: 'platform-js-coverage'
          multiple-files: |
            platform-js, ./platform-js/platform-js/coverage/coverage-summary.json

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # ratchet:mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          check_name: 'Unit Test Results (Platform.js)'
          report_paths: 'platform-js/**/test-report*.xml'

  cd-prerelease:
    runs-on: ubuntu-latest
    needs: ci
    permissions:
      contents: read
      issues: read
      id-token: write
      packages: write
      checks: write
      pull-requests: write
    if: inputs.should_prerelease == 'true'
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@d2ee2b1047995102b08cb4e778b44bd2a662eba3  #v1
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # ratchet:actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Load environment variables
        run: |
          export $(grep -v '^#' .github/env/global.env | xargs)
          for var in $(cut -d= -f1 .github/env/global.env); do
            echo "$var=${!var}" >> $GITHUB_ENV
          done
          export $(grep -v '^#' .github/env/global_c_js.env | xargs)
          for var in $(cut -d= -f1 .github/env/global_c_js.env); do
            echo "$var=${!var}" >> $GITHUB_ENV
          done

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # ratchet:actions/setup-node@v4
        with:
          always-auth: true
          registry-url: https://npm.pkg.github.com/
          scope: '@midnight-ntwrk'
          node-version-file: '.nvmrc'
          cache: 'yarn'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Configure yarn & npm
        run: |
          yarn config set 'npmScopes.midnight-ntwrk.npmAuthToken' ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Cache Turbo and Yarn dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            **/node_modules
            ~/.yarn
            .turbo
          key: turbo-pjs-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/turbo.json') }}
          restore-keys: |
            turbo-pjs-${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Temp bump prerelease
        run: yarn version prerelease

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          version=$(jq -r '.v_info.version' version.platformjs.json)
          preRelease=$(jq -r '.v_info.preRelease' version.platformjs.json)
          tag=$(jq -r '.v_info.tag' version.platformjs.json)
          targetVersion="$version$preRelease.g$calculatedSha"
          echo "target_version=$targetVersion" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Bump versions
        run: yarn workspaces foreach -R --from "./platform-js/*" --exclude "./compact-js/*" --exclude "./packages/*" version ${{ steps.vars.outputs.target_version }}

      - name: Publish packages
        run: yarn deploy ${{ inputs.yarn_filter }} --cache-dir ./turbo -- --tag ${{ steps.vars.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}
          NODE_AUTH_TOKEN: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}
